// https://www.acmicpc.net/problem/16432
import kotlin.system.exitProcess

var N = 0
lateinit var answer: Array<Int>
lateinit var visited: Array<Array<Boolean>>
val riceCake = mutableListOf<List<Int>>()

fun main() {
    N = readln().toInt()
    answer = Array(N) { 0 }
    visited = Array(N) {
        Array(10) { false }
    }

    repeat(N) {
        riceCake.add(readln().split(" ").map { it.toInt() }.filterIndexed { idx, _ -> idx > 0 })
    }

    dfs(0, 0)
    print(-1)
}

fun dfs(prevCake: Int, day: Int) {
    if (day == N) {
        answer.forEach { println(it) }
        exitProcess(0)
    }

    for (cake in riceCake[day]) {
        if (cake != prevCake && !visited[day][cake]) {
            answer[day] = cake
            visited[day][cake] = true
            dfs(cake, day + 1)
        }
    }
}
